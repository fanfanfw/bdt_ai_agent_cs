# Generated by Django 5.2.4 on 2025-08-06 11:44

from django.db import migrations
from django.contrib.auth.hashers import make_password


def populate_business_types(apps, schema_editor):
    """
    Populate business categories for dropdown
    """
    BusinessType = apps.get_model('core', 'BusinessType')
    
    # List of common business categories
    business_categories = [
        {
            'name': 'E-commerce / Online Store',
            'description': 'Online product sales business, marketplace, online stores'
        },
        {
            'name': 'Restaurant / Culinary',
            'description': 'Food and beverage business, restaurants, cafes, catering'
        },
        {
            'name': 'Consulting Services',
            'description': 'Business, legal, financial, IT consulting services, etc.'
        },
        {
            'name': 'Education / Training',
            'description': 'Educational institutions, online courses, training'
        },
        {
            'name': 'Healthcare / Clinic',
            'description': 'Clinics, hospitals, medical practice, pharmacy'
        },
        {
            'name': 'Property / Real Estate',
            'description': 'Property buying and selling, property rental, developers'
        },
        {
            'name': 'Technology / Software',
            'description': 'Software development, IT services, tech startups'
        },
        {
            'name': 'Automotive',
            'description': 'Auto repair shops, showrooms, spare parts, car rental'
        },
        {
            'name': 'Beauty / Salon',
            'description': 'Beauty salons, spas, barbershops, cosmetics'
        },
        {
            'name': 'Travel / Tourism',
            'description': 'Travel agencies, hotels, tour guides, transportation'
        },
        {
            'name': 'Finance / Insurance',
            'description': 'Banks, insurance, investment, fintech'
        },
        {
            'name': 'Event Organizer',
            'description': 'Event organizers, wedding organizers, concerts'
        },
        {
            'name': 'Fashion / Clothing',
            'description': 'Boutiques, clothing stores, designers, tailors'
        },
        {
            'name': 'Logistics / Shipping',
            'description': 'Delivery services, couriers, warehouses, cargo'
        },
        {
            'name': 'Others',
            'description': 'Other business categories not listed above'
        }
    ]
    
    # Create business types if they don't exist
    for category in business_categories:
        BusinessType.objects.get_or_create(
            name=category['name'],
            defaults={'description': category['description']}
        )


def create_admin_user(apps, schema_editor):
    """
    Create default admin user
    """
    User = apps.get_model('auth', 'User')
    UserProfile = apps.get_model('core', 'UserProfile')
    
    # Create admin user if doesn't exist
    admin_user, created = User.objects.get_or_create(
        username='admin',
        defaults={
            'email': 'admin@example.com',
            'first_name': 'Admin',
            'last_name': 'User',
            'is_staff': True,
            'is_superuser': True,
            'is_active': True,
            'password': make_password('Scr@pp3r')  # Default password
        }
    )
    
    if created:
        # Create admin profile
        UserProfile.objects.get_or_create(
            user=admin_user,
            defaults={
                'user_type': 'admin',
                'status': 'approved',
                'subscription_plan': 'pro_plus',
                'monthly_api_limit': 0,  # Unlimited
                'monthly_token_limit': 0,  # Unlimited
            }
        )


def reverse_populate_business_types(apps, schema_editor):
    """
    Remove business categories (reverse migration)
    """
    BusinessType = apps.get_model('core', 'BusinessType')
    BusinessType.objects.all().delete()


def reverse_create_admin_user(apps, schema_editor):
    """
    Remove admin user (reverse migration)
    """
    User = apps.get_model('auth', 'User')
    try:
        admin_user = User.objects.get(username='admin')
        admin_user.delete()
    except User.DoesNotExist:
        pass


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0006_userprofile_user_type'),
    ]

    operations = [
        migrations.RunPython(populate_business_types, reverse_populate_business_types),
        migrations.RunPython(create_admin_user, reverse_create_admin_user),
    ]
